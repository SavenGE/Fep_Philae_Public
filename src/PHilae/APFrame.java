/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
 * MAINFrame.java
 *
 * Created on Jun 20, 2011, 11:07:55 PM
 */
package PHilae;

import PHilae.acx.CSPanel;
import static PHilae.APController.getWorker;
import static PHilae.APController.getClient;
import PHilae.acx.ACPane;
import PHilae.acx.AEPanel;
import PHilae.acx.AXMeter;
import PHilae.acx.ASPanel;
import PHilae.acx.AUPanel;
import PHilae.acx.AXConstant;
import PHilae.acx.ULPanel;
import PHilae.acx.TCPanel;
import PHilae.acx.TRItem;
import PHilae.acx.TRenderer;
import PHilae.enu.ALHeader;
import PHilae.est.ESController;
import PHilae.est.ESPanel;
import PHilae.model.AXNode;
import PHilae.sms.ALController;
import PHilae.vma.VXController;
import PHilae.sms.ALPanel;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.event.ItemEvent;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.Objects;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import static javax.swing.SwingConstants.LEFT;
import static javax.swing.SwingConstants.RIGHT;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/**
 *
 * @author Pecherk
 */
public final class APFrame extends javax.swing.JFrame {

    /**
     * Creates new form MAINFrame
     */
    public APFrame() {
        initComponents();
        showTxnTree();
        setMenus();
    }

    public void setMenus() {
        suspendMobileCheckBoxMenuItem.setText(VXController.isSuspended() ? "Start Mobile" : "Suspend Mobile");
        suspendAlertsCheckBoxMenuItem.setText(ALController.isSuspended() ? "Start Alerts" : "Suspend Alerts");
        suspendMailerCheckBoxMenuItem.setText(ESController.isSuspended() ? "Start Mailer" : "Suspend Mailer");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        listPanel = new javax.swing.JPanel();
        listTableScroller = new javax.swing.JScrollPane();
        listTable = new javax.swing.JTable();
        bigSplitPane = new javax.swing.JSplitPane();
        treePanel = new javax.swing.JPanel();
        activityBox = new javax.swing.JComboBox<>();
        txnTreeScroller = new javax.swing.JScrollPane();
        txnTree = new javax.swing.JTree();
        rightSplitPane = new javax.swing.JSplitPane();
        msgSplitPane = new javax.swing.JSplitPane();
        upperMessagePanel = new javax.swing.JPanel();
        upperTableScroller = new javax.swing.JScrollPane();
        upperTable = new javax.swing.JTable();
        lowerMessagePanel = new javax.swing.JPanel();
        lowerTableScroller = new javax.swing.JScrollPane();
        lowerTable = new javax.swing.JTable();
        displayPanel = new javax.swing.JPanel();
        displayScroller = new javax.swing.JScrollPane();
        leftToolBar = new javax.swing.JToolBar();
        shutdownButton = new javax.swing.JButton();
        aboutButton = new javax.swing.JButton();
        metersToolBar = new javax.swing.JToolBar();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        usersMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        encryptMenuItem = new javax.swing.JMenuItem();
        jSeparator10 = new javax.swing.JPopupMenu.Separator();
        shutdownMenuItem = new javax.swing.JMenuItem();
        mobileMenu = new javax.swing.JMenu();
        mobileSettingsMenuItem = new javax.swing.JMenuItem();
        jSeparator8 = new javax.swing.JPopupMenu.Separator();
        mobileSchemeMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        mobileChargesMenuItem = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        suspendMobileCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        alertsMenu1 = new javax.swing.JMenu();
        alertSettingsMenuItem1 = new javax.swing.JMenuItem();
        manageAlertMenuItem = new javax.swing.JMenuItem();
        jSeparator12 = new javax.swing.JPopupMenu.Separator();
        alertSchemeMenuItem = new javax.swing.JMenuItem();
        alertChargesMenuItem1 = new javax.swing.JMenuItem();
        jSeparator14 = new javax.swing.JPopupMenu.Separator();
        suspendAlertsCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        mailerMenu = new javax.swing.JMenu();
        mailerSettingsMenuItem = new javax.swing.JMenuItem();
        manageMailerTaskMenuItem = new javax.swing.JMenuItem();
        jSeparator16 = new javax.swing.JPopupMenu.Separator();
        mailerSchemeMenuItem = new javax.swing.JMenuItem();
        mailerChargesMenuItem = new javax.swing.JMenuItem();
        jSeparator19 = new javax.swing.JPopupMenu.Separator();
        suspendMailerCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        aboutMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        listPanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder("Processed Transactions"), javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2)));

        listTableScroller.setBorder(null);

        listTable.setBorder(javax.swing.BorderFactory.createLineBorder(javax.swing.UIManager.getDefaults().getColor("Table.gridColor")));
        listTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Field", "Content", "Description"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        listTableScroller.setViewportView(listTable);

        javax.swing.GroupLayout listPanelLayout = new javax.swing.GroupLayout(listPanel);
        listPanel.setLayout(listPanelLayout);
        listPanelLayout.setHorizontalGroup(
            listPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 669, Short.MAX_VALUE)
            .addGroup(listPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(listTableScroller, javax.swing.GroupLayout.DEFAULT_SIZE, 669, Short.MAX_VALUE))
        );
        listPanelLayout.setVerticalGroup(
            listPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 249, Short.MAX_VALUE)
            .addGroup(listPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(listTableScroller, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle(APController.application + " ~ " + APController.getClient().queryBankName());
        setForeground(java.awt.Color.white);
        setIconImage(Toolkit.getDefaultToolkit().createImage(getClass().getResource("/PHilae/ximg/icon.png")));
        setName("APFrame"); // NOI18N
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                shutdownBridge(evt);
            }
        });

        bigSplitPane.setDividerLocation(135);
        bigSplitPane.setDividerSize(8);

        treePanel.setBackground(java.awt.Color.white);
        treePanel.setMinimumSize(new java.awt.Dimension(136, 505));
        treePanel.setPreferredSize(new java.awt.Dimension(136, 505));

        activityBox.setBackground(new java.awt.Color(102, 204, 255));
        activityBox.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        activityBox.setForeground(java.awt.Color.white);
        activityBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "VMA", "SMS", "EST" }));
        activityBox.setBorder(null);
        activityBox.setFocusable(false);
        ((JLabel)activityBox.getRenderer()).setHorizontalAlignment(SwingConstants.CENTER);
        ((JLabel)activityBox.getRenderer()).setVerticalAlignment(SwingConstants.CENTER);
        ((JLabel)activityBox.getRenderer()).setBorder(null);
        activityBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                activityBoxItemStateChanged(evt);
            }
        });

        txnTreeScroller.setBorder(null);

        txnTree.setBorder(javax.swing.BorderFactory.createEmptyBorder(2, 5, 2, 5));
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Activity");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Approved");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Rejected");
        treeNode1.add(treeNode2);
        txnTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        txnTree.setAutoscrolls(true);
        txnTree.setCellRenderer(new TRenderer());
        txnTree.setRootVisible(false);
        txnTree.setShowsRootHandles(true);
        txnTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                txnTreeValueChanged(evt);
            }
        });
        txnTreeScroller.setViewportView(txnTree);

        javax.swing.GroupLayout treePanelLayout = new javax.swing.GroupLayout(treePanel);
        treePanel.setLayout(treePanelLayout);
        treePanelLayout.setHorizontalGroup(
            treePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txnTreeScroller, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
            .addComponent(activityBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        treePanelLayout.setVerticalGroup(
            treePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(treePanelLayout.createSequentialGroup()
                .addComponent(activityBox, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(txnTreeScroller, javax.swing.GroupLayout.DEFAULT_SIZE, 490, Short.MAX_VALUE))
        );

        bigSplitPane.setLeftComponent(treePanel);

        rightSplitPane.setBorder(null);
        rightSplitPane.setDividerLocation(440);
        rightSplitPane.setDividerSize(8);
        rightSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        rightSplitPane.setResizeWeight(1.0);
        rightSplitPane.setToolTipText("");

        msgSplitPane.setDividerLocation(220);
        msgSplitPane.setDividerSize(8);
        msgSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        msgSplitPane.setResizeWeight(0.5);

        upperMessagePanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder("Request Message"), javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2)));

        upperTableScroller.setBorder(null);

        upperTable.setAutoCreateRowSorter(true);
        upperTable.setBorder(javax.swing.BorderFactory.createLineBorder(javax.swing.UIManager.getDefaults().getColor("Table.gridColor")));
        upperTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Field", "Content", "Description"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        upperTableScroller.setViewportView(upperTable);

        javax.swing.GroupLayout upperMessagePanelLayout = new javax.swing.GroupLayout(upperMessagePanel);
        upperMessagePanel.setLayout(upperMessagePanelLayout);
        upperMessagePanelLayout.setHorizontalGroup(
            upperMessagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 703, Short.MAX_VALUE)
            .addGroup(upperMessagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(upperTableScroller, javax.swing.GroupLayout.DEFAULT_SIZE, 703, Short.MAX_VALUE))
        );
        upperMessagePanelLayout.setVerticalGroup(
            upperMessagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 182, Short.MAX_VALUE)
            .addGroup(upperMessagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(upperTableScroller, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE))
        );

        msgSplitPane.setLeftComponent(upperMessagePanel);

        lowerMessagePanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder("Response Message"), javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2)));

        lowerTableScroller.setBorder(null);

        lowerTable.setAutoCreateRowSorter(true);
        lowerTable.setBorder(javax.swing.BorderFactory.createLineBorder(javax.swing.UIManager.getDefaults().getColor("Table.gridColor")));
        lowerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Field", "Content", "Description"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        lowerTableScroller.setViewportView(lowerTable);

        javax.swing.GroupLayout lowerMessagePanelLayout = new javax.swing.GroupLayout(lowerMessagePanel);
        lowerMessagePanel.setLayout(lowerMessagePanelLayout);
        lowerMessagePanelLayout.setHorizontalGroup(
            lowerMessagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lowerTableScroller, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 703, Short.MAX_VALUE)
        );
        lowerMessagePanelLayout.setVerticalGroup(
            lowerMessagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lowerTableScroller, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
        );

        msgSplitPane.setRightComponent(lowerMessagePanel);

        rightSplitPane.setLeftComponent(msgSplitPane);

        console.setEditable(false);
        console.setBackground(new java.awt.Color(204, 255, 204));
        displayScroller.setViewportView(console);

        javax.swing.GroupLayout displayPanelLayout = new javax.swing.GroupLayout(displayPanel);
        displayPanel.setLayout(displayPanelLayout);
        displayPanelLayout.setHorizontalGroup(
            displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 721, Short.MAX_VALUE)
            .addGroup(displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(displayScroller, javax.swing.GroupLayout.DEFAULT_SIZE, 721, Short.MAX_VALUE))
        );
        displayPanelLayout.setVerticalGroup(
            displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 81, Short.MAX_VALUE)
            .addGroup(displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(displayScroller, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE))
        );

        rightSplitPane.setRightComponent(displayPanel);

        bigSplitPane.setRightComponent(rightSplitPane);

        leftToolBar.setFloatable(false);
        leftToolBar.setRollover(true);

        shutdownButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PHilae/ximg/exit.png"))); // NOI18N
        shutdownButton.setToolTipText("Shutdown PHilae");
        shutdownButton.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray));
        shutdownButton.setFocusable(false);
        shutdownButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        shutdownButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        shutdownButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shutdownButtonActionPerformed(evt);
            }
        });
        leftToolBar.add(shutdownButton);

        aboutButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PHilae/ximg/about.png"))); // NOI18N
        aboutButton.setToolTipText("About PHilae");
        aboutButton.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEmptyBorder(0, 2, 0, 0), javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray)));
        aboutButton.setFocusable(false);
        aboutButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        aboutButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        aboutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAboutInformation(evt);
            }
        });
        leftToolBar.add(aboutButton);

        metersToolBar.setBorder(null);
        metersToolBar.setFloatable(false);
        metersToolBar.setRollover(true);
        metersToolBar.setToolTipText("");
        metersToolBar.setOpaque(false);

        setMeters();

        fileMenu.setMnemonic('R');
        fileMenu.setText("PHilae");

        usersMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_U, java.awt.event.InputEvent.CTRL_MASK));
        usersMenuItem.setText("Manage Users");
        usersMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usersMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(usersMenuItem);
        fileMenu.add(jSeparator1);

        encryptMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        encryptMenuItem.setText("Encrypt Text");
        encryptMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encryptMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(encryptMenuItem);
        fileMenu.add(jSeparator10);

        shutdownMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        shutdownMenuItem.setText("Shutdown PHilae");
        shutdownMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shutdownMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(shutdownMenuItem);

        menuBar.add(fileMenu);

        mobileMenu.setMnemonic('M');
        mobileMenu.setText("Mobile");

        mobileSettingsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK));
        mobileSettingsMenuItem.setText("Mobile Settings");
        mobileSettingsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mobileSettingsMenuItemActionPerformed(evt);
            }
        });
        mobileMenu.add(mobileSettingsMenuItem);
        mobileMenu.add(jSeparator8);

        mobileSchemeMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.ALT_MASK));
        mobileSchemeMenuItem.setText("Mobile Schemes");
        mobileSchemeMenuItem.setEnabled(false);
        mobileSchemeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mobileSchemeMenuItemActionPerformed(evt);
            }
        });
        mobileMenu.add(mobileSchemeMenuItem);
        mobileMenu.add(jSeparator2);

        mobileChargesMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.ALT_MASK));
        mobileChargesMenuItem.setText("Mobile Charges");
        mobileChargesMenuItem.setEnabled(false);
        mobileChargesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mobileChargesMenuItemActionPerformed(evt);
            }
        });
        mobileMenu.add(mobileChargesMenuItem);
        mobileMenu.add(jSeparator6);

        suspendMobileCheckBoxMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F3, java.awt.event.InputEvent.ALT_MASK));
        suspendMobileCheckBoxMenuItem.setSelected(!VXController.isSuspended());
        suspendMobileCheckBoxMenuItem.setText("Suspend Mobile");
        suspendMobileCheckBoxMenuItem.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                suspendMobileCheckBoxMenuItemItemStateChanged(evt);
            }
        });
        mobileMenu.add(suspendMobileCheckBoxMenuItem);

        menuBar.add(mobileMenu);

        alertsMenu1.setMnemonic('L');
        alertsMenu1.setText("Alerts");
        alertsMenu1.setEnabled(false);

        alertSettingsMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.ALT_MASK));
        alertSettingsMenuItem1.setText("Alert Settings");
        alertSettingsMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alertSettingsMenuItem1ActionPerformed(evt);
            }
        });
        alertsMenu1.add(alertSettingsMenuItem1);

        manageAlertMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK));
        manageAlertMenuItem.setText("Manage Alerts");
        manageAlertMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageAlertMenuItemActionPerformed(evt);
            }
        });
        alertsMenu1.add(manageAlertMenuItem);
        alertsMenu1.add(jSeparator12);

        alertSchemeMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.ALT_MASK));
        alertSchemeMenuItem.setText("Alert Schemes");
        alertSchemeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alertSchemeMenuItemActionPerformed(evt);
            }
        });
        alertsMenu1.add(alertSchemeMenuItem);

        alertChargesMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.ALT_MASK));
        alertChargesMenuItem1.setText("Alert Charges");
        alertChargesMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alertChargesMenuItem1ActionPerformed(evt);
            }
        });
        alertsMenu1.add(alertChargesMenuItem1);
        alertsMenu1.add(jSeparator14);

        suspendAlertsCheckBoxMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F6, java.awt.event.InputEvent.ALT_MASK));
        suspendAlertsCheckBoxMenuItem.setSelected(!ALController.isSuspended());
        suspendAlertsCheckBoxMenuItem.setText("Suspend Alerts");
        suspendAlertsCheckBoxMenuItem.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                suspendAlertsCheckBoxMenuItemItemStateChanged(evt);
            }
        });
        alertsMenu1.add(suspendAlertsCheckBoxMenuItem);

        menuBar.add(alertsMenu1);

        mailerMenu.setMnemonic('L');
        mailerMenu.setText("Mailer");
        mailerMenu.setEnabled(false);

        mailerSettingsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.ALT_MASK));
        mailerSettingsMenuItem.setText("Mailer Settings");
        mailerSettingsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mailerSettingsMenuItemActionPerformed(evt);
            }
        });
        mailerMenu.add(mailerSettingsMenuItem);

        manageMailerTaskMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK));
        manageMailerTaskMenuItem.setText("Manage Tasks");
        manageMailerTaskMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageMailerTaskMenuItemActionPerformed(evt);
            }
        });
        mailerMenu.add(manageMailerTaskMenuItem);
        mailerMenu.add(jSeparator16);

        mailerSchemeMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.ALT_MASK));
        mailerSchemeMenuItem.setText("Mailer Schemes");
        mailerSchemeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mailerSchemeMenuItemActionPerformed(evt);
            }
        });
        mailerMenu.add(mailerSchemeMenuItem);

        mailerChargesMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.ALT_MASK));
        mailerChargesMenuItem.setText("Mailer Charges");
        mailerChargesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mailerChargesMenuItemActionPerformed(evt);
            }
        });
        mailerMenu.add(mailerChargesMenuItem);
        mailerMenu.add(jSeparator19);

        suspendMailerCheckBoxMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F10, java.awt.event.InputEvent.ALT_MASK));
        suspendMailerCheckBoxMenuItem.setSelected(!ESController.isSuspended());
        suspendMailerCheckBoxMenuItem.setText("Suspend Mailer");
        suspendMailerCheckBoxMenuItem.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                suspendMailerCheckBoxMenuItemItemStateChanged(evt);
            }
        });
        mailerMenu.add(suspendMailerCheckBoxMenuItem);

        menuBar.add(mailerMenu);

        aboutMenu.setMnemonic('B');
        aboutMenu.setText("About");
        aboutMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuActionPerformed(evt);
            }
        });

        aboutMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, java.awt.event.InputEvent.ALT_MASK));
        aboutMenuItem.setText("About PHilae");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        aboutMenu.add(aboutMenuItem);

        menuBar.add(aboutMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(leftToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(metersToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 542, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(bigSplitPane))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(leftToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                    .addComponent(metersToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(5, 5, 5)
                .addComponent(bigSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 510, Short.MAX_VALUE)
                .addContainerGap())
        );

        bigSplitPane.setDividerLocation(bigSplitPane.getMinimumDividerLocation());
        updateDisplay();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txnTreeValueChanged(javax.swing.event.TreeSelectionEvent evt)//GEN-FIRST:event_txnTreeValueChanged
    {//GEN-HEADEREND:event_txnTreeValueChanged
        // TODO add your handling code here:
        updateDisplay();
    }//GEN-LAST:event_txnTreeValueChanged

    private void shutdownBridge(java.awt.event.WindowEvent evt)//GEN-FIRST:event_shutdownBridge
    {//GEN-HEADEREND:event_shutdownBridge
        // TODO add your handling code here:
        EventQueue.invokeLater(shutdownButton::doClick);
    }//GEN-LAST:event_shutdownBridge

    private void showAboutInformation(java.awt.event.ActionEvent evt)//GEN-FIRST:event_showAboutInformation
    {//GEN-HEADEREND:event_showAboutInformation
        // TODO add your handling code here:
        showAboutInfo();
    }//GEN-LAST:event_showAboutInformation

    private void shutdownMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_shutdownMenuItemActionPerformed
    {//GEN-HEADEREND:event_shutdownMenuItemActionPerformed
        // TODO add your handling code here:
        EventQueue.invokeLater(shutdownButton::doClick);
    }//GEN-LAST:event_shutdownMenuItemActionPerformed

    private void aboutMenuActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_aboutMenuActionPerformed
    {//GEN-HEADEREND:event_aboutMenuActionPerformed
        // TODO add your handling code here:
        EventQueue.invokeLater(aboutButton::doClick);
    }//GEN-LAST:event_aboutMenuActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_aboutMenuItemActionPerformed
    {//GEN-HEADEREND:event_aboutMenuItemActionPerformed
        // TODO add your handling code here:
        EventQueue.invokeLater(aboutButton::doClick);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    public void setMeters() {
        metersToolBar.removeAll();
        metersToolBar.add(getEstMeter());
        metersToolBar.addSeparator(new Dimension(1, 67));
        metersToolBar.add(getSmsMeter());
        metersToolBar.addSeparator(new Dimension(1, 67));
        metersToolBar.add(getVmaMeter());
    }

    private void usersMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_usersMenuItemActionPerformed
    {//GEN-HEADEREND:event_usersMenuItemActionPerformed
        // TODO add your handling code here:
        if (adminLogin.isUserAdmin("Manage Users", "AU")) {
            usersPanel.showDialog();
        }
    }//GEN-LAST:event_usersMenuItemActionPerformed

    private void encryptMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_encryptMenuItemActionPerformed
    {//GEN-HEADEREND:event_encryptMenuItemActionPerformed
        // TODO add your handling code here:
        if (adminLogin.isUserAdmin("Encrypt Text", "AE")) {
            getCypherPanel().showDialog();
        }
    }//GEN-LAST:event_encryptMenuItemActionPerformed

    private void activityBoxItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_activityBoxItemStateChanged
    {//GEN-HEADEREND:event_activityBoxItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            showTxnTree();
        }
    }//GEN-LAST:event_activityBoxItemStateChanged

    private void mobileSettingsMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mobileSettingsMenuItemActionPerformed
    {//GEN-HEADEREND:event_mobileSettingsMenuItemActionPerformed
        // TODO add your handling code here:
        if (adminLogin.isUserAdmin("Mobile Settings", "MS")) {
            vmaSettings.showDialog(VXController.module);
        }
    }//GEN-LAST:event_mobileSettingsMenuItemActionPerformed

    private void mobileSchemeMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mobileSchemeMenuItemActionPerformed
    {//GEN-HEADEREND:event_mobileSchemeMenuItemActionPerformed
        // TODO add your handling code here:
        if (adminLogin.isUserAdmin("Mobile Schemes", "ME")) {
            vmaSchemes.showDialog(VXController.module);
        }
    }//GEN-LAST:event_mobileSchemeMenuItemActionPerformed

    private void mobileChargesMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mobileChargesMenuItemActionPerformed
    {//GEN-HEADEREND:event_mobileChargesMenuItemActionPerformed
        // TODO add your handling code here:
        if (adminLogin.isUserAdmin("Mobile Charges", "MC")) {
            vmaCharges.showDialog(VXController.module);
        }
    }//GEN-LAST:event_mobileChargesMenuItemActionPerformed

    private void suspendMobileCheckBoxMenuItemItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_suspendMobileCheckBoxMenuItemItemStateChanged
    {//GEN-HEADEREND:event_suspendMobileCheckBoxMenuItemItemStateChanged
        // TODO add your handling code here:
        if (suspendMobileCheckBoxMenuItem.isSelected() == VXController.isSuspended()) {
            if (adminLogin.isUserAdmin("Suspend Mobile", "MU")) {
                APController.updateSetting("SuspendMobile", (APController.suspendMobile = (suspendMobileCheckBoxMenuItem.isSelected() ? "No" : "Yes")));
                APMain.restartServer();
            }
            suspendMobileCheckBoxMenuItem.setText(VXController.isSuspended() ? "Start Mobile" : "Suspend Mobile");
            suspendMobileCheckBoxMenuItem.setSelected(!VXController.isSuspended());
        }
    }//GEN-LAST:event_suspendMobileCheckBoxMenuItemItemStateChanged

    private void alertSettingsMenuItem1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_alertSettingsMenuItem1ActionPerformed
    {//GEN-HEADEREND:event_alertSettingsMenuItem1ActionPerformed
        // TODO add your handling code here:
        if (adminLogin.isUserAdmin("SMS Settings", "LS")) {
            smsSettings.showDialog(ALController.module);
        }
    }//GEN-LAST:event_alertSettingsMenuItem1ActionPerformed

    private void manageAlertMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_manageAlertMenuItemActionPerformed
    {//GEN-HEADEREND:event_manageAlertMenuItemActionPerformed
        // TODO add your handling code here:
        if (adminLogin.isUserAdmin("SMS Alerts", "LA")) {
            smsAlerts.showDialog();
        }
    }//GEN-LAST:event_manageAlertMenuItemActionPerformed

    private void alertSchemeMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_alertSchemeMenuItemActionPerformed
    {//GEN-HEADEREND:event_alertSchemeMenuItemActionPerformed
        // TODO add your handling code here:
        if (adminLogin.isUserAdmin("SMS Schemes", "LE")) {
            smsSchemes.showDialog(ALController.module);
        }
    }//GEN-LAST:event_alertSchemeMenuItemActionPerformed

    private void alertChargesMenuItem1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_alertChargesMenuItem1ActionPerformed
    {//GEN-HEADEREND:event_alertChargesMenuItem1ActionPerformed
        // TODO add your handling code here:
        if (adminLogin.isUserAdmin("Alert Charges", "LC")) {
            smsCharges.showDialog(ALController.module);
        }
    }//GEN-LAST:event_alertChargesMenuItem1ActionPerformed

    private void suspendAlertsCheckBoxMenuItemItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_suspendAlertsCheckBoxMenuItemItemStateChanged
    {//GEN-HEADEREND:event_suspendAlertsCheckBoxMenuItemItemStateChanged
        // TODO add your handling code here:
        if (suspendAlertsCheckBoxMenuItem.isSelected() == ALController.isSuspended()) {
            if (adminLogin.isUserAdmin("Suspend Alerts", "LU")) {
                APController.updateSetting("SuspendAlerts", (APController.suspendAlerts = (suspendAlertsCheckBoxMenuItem.isSelected() ? "No" : "Yes")));
            }
            suspendAlertsCheckBoxMenuItem.setText(ALController.isSuspended() ? "Start Alerts" : "Suspend Alerts");
            suspendAlertsCheckBoxMenuItem.setSelected(!ALController.isSuspended());
        }
    }//GEN-LAST:event_suspendAlertsCheckBoxMenuItemItemStateChanged

    private void mailerSettingsMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mailerSettingsMenuItemActionPerformed
    {//GEN-HEADEREND:event_mailerSettingsMenuItemActionPerformed
        // TODO add your handling code here:
        if (adminLogin.isUserAdmin("Mailer Settings", "SS")) {
            estSettings.showDialog(ESController.module);
        }
    }//GEN-LAST:event_mailerSettingsMenuItemActionPerformed

    private void manageMailerTaskMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_manageMailerTaskMenuItemActionPerformed
    {//GEN-HEADEREND:event_manageMailerTaskMenuItemActionPerformed
        // TODO add your handling code here:
        if (adminLogin.isUserAdmin("Mailer Tasks", "SA")) {
            estTasks.showDialog();
        }
    }//GEN-LAST:event_manageMailerTaskMenuItemActionPerformed

    private void mailerSchemeMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mailerSchemeMenuItemActionPerformed
    {//GEN-HEADEREND:event_mailerSchemeMenuItemActionPerformed
        // TODO add your handling code here:
        if (adminLogin.isUserAdmin("Mailer Schemes", "SE")) {
            estSchemes.showDialog(ESController.module);
        }
    }//GEN-LAST:event_mailerSchemeMenuItemActionPerformed

    private void mailerChargesMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mailerChargesMenuItemActionPerformed
    {//GEN-HEADEREND:event_mailerChargesMenuItemActionPerformed
        // TODO add your handling code here:
        if (adminLogin.isUserAdmin("Mailer Charges", "SC")) {
            estCharges.showDialog(ESController.module);
        }
    }//GEN-LAST:event_mailerChargesMenuItemActionPerformed

    private void suspendMailerCheckBoxMenuItemItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_suspendMailerCheckBoxMenuItemItemStateChanged
    {//GEN-HEADEREND:event_suspendMailerCheckBoxMenuItemItemStateChanged
        // TODO add your handling code here:
        if (suspendMailerCheckBoxMenuItem.isSelected() == ESController.isSuspended()) {
            if (adminLogin.isUserAdmin("Suspend Mailer", "SU")) {
                APController.updateSetting("SuspendMailer", (APController.suspendMailer = (suspendMailerCheckBoxMenuItem.isSelected() ? "No" : "Yes")));
            }
            suspendMailerCheckBoxMenuItem.setText(ESController.isSuspended() ? "Start Mailer" : "Suspend Mailer");
            suspendMailerCheckBoxMenuItem.setSelected(!ESController.isSuspended());
        }
    }//GEN-LAST:event_suspendMailerCheckBoxMenuItemItemStateChanged

    private void shutdownButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_shutdownButtonActionPerformed
    {//GEN-HEADEREND:event_shutdownButtonActionPerformed
        // TODO add your handling code here:
        if (!getWorker().isYes(APController.lockShutdown) || adminLogin.isUserAdmin("Shutdown PHilae", "AS")) {
            APMain.shutdown(false);
        }
    }//GEN-LAST:event_shutdownButtonActionPerformed

    public final void showTxnTree() {
        try {
            ArrayList<AXNode> vec = new ArrayList<>();
            DefaultMutableTreeNode txnRootNode = ((DefaultMutableTreeNode) txnTree.getModel().getRoot());
            DefaultMutableTreeNode approvedNode = (DefaultMutableTreeNode) txnRootNode.getFirstChild();

            DefaultMutableTreeNode rejectedNode = (DefaultMutableTreeNode) txnRootNode.getLastChild();
            approvedNode.removeAllChildren();
            rejectedNode.removeAllChildren();

            switch (getWorker().getBoxValue(activityBox).toUpperCase()) {
                case "VMA":
//                    vec.add(new AXNode("MR", "Registration"));
//                    vec.add(new AXNode("MA", "Member Accounts"));
//                    vec.add(new AXNode("AD", "Account Details"));
//
//                    vec.add(new AXNode("MI", "Member Image"));
//                    vec.add(new AXNode("LA", "Loan Accounts"));
//                    vec.add(new AXNode("SA", "Savings Accounts"));
//
//                    vec.add(new AXNode("CA", "Capital Accounts"));
//                    vec.add(new AXNode("NA", "NWD Accounts"));
//                    vec.add(new AXNode("LT", "Loan Types"));
//
//                    vec.add(new AXNode("ST", "Statement Transactions"));
//                    vec.add(new AXNode("ME", "Member Eligibility"));
//                    vec.add(new AXNode("BC", "Branch Codes"));
//
//                    vec.add(new AXNode("RF", "Refer A Friend"));
//                    vec.add(new AXNode("SB", "Saving Balance"));
//                    vec.add(new AXNode("CB", "Capital Balance"));
//
//                    vec.add(new AXNode("LB", "Loan Balance"));
//                    vec.add(new AXNode("NB", "NWD Balance"));
//                    vec.add(new AXNode("MS", "MiniStatement"));
//
//                    vec.add(new AXNode("DP", "Deposit"));
//                    vec.add(new AXNode("WD", "Withdrawal"));
//                    vec.add(new AXNode("AT", "Airtime Purchase"));
//
//                    vec.add(new AXNode("TR", "Fund Transfer"));
//                    vec.add(new AXNode("SR", "Statement Request"));
//                    vec.add(new AXNode("AL", "Apply Loan"));
//
//                    vec.add(new AXNode("DL", "Deposit To Loan"));
//                    vec.add(new AXNode("TL", "Transfer To Loan"));
//                    vec.add(new AXNode("ML", "M-Pesa To Loan"));
//
//                    vec.add(new AXNode("VC", "Vervee Cash Payment"));
//                    vec.add(new AXNode("GT", "GOTV Payment"));
//                    vec.add(new AXNode("KP", "Kenya Power Payment"));
//
//                    vec.add(new AXNode("KW", "Kisumu Water Payment"));
//                    vec.add(new AXNode("NW", "Nairobi Water Payment"));
//                    vec.add(new AXNode("NH", "NHIF Payment"));
//
//                    vec.add(new AXNode("ZK", "ZUKU Payment"));
//                    vec.add(new AXNode("MC", "MultiChoice Payment"));
//                    vec.add(new AXNode("SM", "StarTimes Payment"));
//
//                    vec.add(new AXNode("SF", "Safaricom Payment"));
//                    vec.add(new AXNode("PL", "PesaLink Transfer"));
//                    vec.add(new AXNode("OP", "Other Payment"));
//
//                    vec.add(new AXNode("MD", "M-Pesa Deposit"));
//                    vec.add(new AXNode("MV", "M-Pesa Verify"));
//                    vec.add(new AXNode("LR", "Loan Recovery"));
//                    
//                    vec.add(new AXNode("UQ", "Users Query"));
                    setTreeLog(VXController.getTreeLog());
                    setHeaders(VXController.getHeaders());
                    break;
                case "SMS":
//                    vec.add(new AXNode("CR", "Credit Alerts"));
//                    vec.add(new AXNode("DR", "Debit Alerts"));
//                    vec.add(new AXNode("LD", "Loan Due Alerts"));
//
//                    vec.add(new AXNode("LA", "Loan Arrears Alerts"));
//                    vec.add(new AXNode("BR", "Broadcast Alerts"));
                    setTreeLog(ALController.getTreeLog());
                    setHeaders(ALController.getHeaders());
                    break;
                case "EST":
//                    vec.add(new AXNode("D", "Daily Statement"));
//                    vec.add(new AXNode("W", "Weekly Statement"));
//                    vec.add(new AXNode("M", "Monthly Statement"));
//
//                    vec.add(new AXNode("Q", "Quarterly Statement"));
//                    vec.add(new AXNode("A", "Annual Statement"));
//                    vec.add(new AXNode("O", "One-Off Statement"));

                    setTreeLog(ESController.getTreeLog());
                    setHeaders(ESController.getHeaders());
                    break;
            }

            vec.stream().forEach((item)
                    -> {
                setNodeItems(approvedNode, rejectedNode, getTreeLog(), item);
            });

            getWorker().expandAllNodes(txnTree, TRItem.class);
            vec.clear();
        } catch (Exception ex) {
            APMain.acxLog.logEvent(ex);
        }
    }

    private void setNodeItems(DefaultMutableTreeNode approvedNode, DefaultMutableTreeNode rejectedNode, ArrayList<TRItem> list, AXNode node) {
        DefaultMutableTreeNode approvedItems = new DefaultMutableTreeNode(node.getClone(true));
        DefaultMutableTreeNode rejectedItems = new DefaultMutableTreeNode(node.getClone(false));
        try {
            list.stream().filter((item) -> (Objects.equals(node.getCode(), item.getCode()))).forEach((item)
                    -> {
                if (item.isApproved()) {
                    approvedItems.insert(new DefaultMutableTreeNode(item), 0);
                } else {
                    rejectedItems.insert(new DefaultMutableTreeNode(item), 0);
                }
            });
        } catch (Exception ex) {
            ex = null;
        }
        approvedNode.add(approvedItems);
        rejectedNode.add(rejectedItems);
    }

    public void updateDisplay() {
        try {
            DefaultMutableTreeNode selectedTxnNode = (DefaultMutableTreeNode) txnTree.getLastSelectedPathComponent();
            if (selectedTxnNode != null) {
                int splitLoc = rightSplitPane.getDividerLocation();
                Object selectedObject = selectedTxnNode.getUserObject();
                if (selectedObject instanceof TRItem) {
                    rightSplitPane.setTopComponent(msgSplitPane);
                    rightSplitPane.setDividerLocation(splitLoc);
                    AXNode node = (AXNode) ((DefaultMutableTreeNode) selectedTxnNode.getParent()).getUserObject();

                    upperMessagePanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder(node.getDescription() + " Request"), javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2)));
                    lowerMessagePanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder(node.getDescription() + " Response"), javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2)));

                    upperTableScroller.setViewportView(prepareTable(getWorker().createItemTable(((TRItem) selectedObject).getRequest())));
                    lowerTableScroller.setViewportView(prepareTable(getWorker().createItemTable(((TRItem) selectedObject).getResponse())));
                } else if (selectedObject instanceof AXNode) {
                    AXNode node = (AXNode) selectedObject;
                    rightSplitPane.setTopComponent(listPanel);

                    rightSplitPane.setDividerLocation(splitLoc);
                    listPanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder((node.isApproved() ? "Approved " : "Rejected ") + node.getDescription()), javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2)));
                    listTableScroller.setViewportView(createDetailTable(node));
                }
            }
        } catch (Exception ex) {
            APMain.acxLog.logEvent(ex);
        }
    }

    public JTable createDetailTable(AXNode tXNode) {
        JTable table = new JTable();
        ArrayList row = new ArrayList();
        ArrayList<Object[]> data = new ArrayList<>();

        LinkedHashSet<ALHeader> columns = new LinkedHashSet<>();
        getTreeLog().stream().filter((item) -> (Objects.equals(tXNode.getCode(), item.getCode()) && tXNode.isApproved() == item.isApproved())).map((item)
                -> {
            getHeaders().stream().filter((header) -> (item.getDetail().containsKey(header))).map((header)
                    -> {
                row.add(item.getDetail().get(header));
                return header;
            }).forEach((header)
                    -> {
                columns.add(header);
            });
            return item;
        }).map((_item)
                -> {
            data.add(0, row.toArray());
            return _item;
        }).forEach((_item)
                -> {
            row.clear();
        });

        table.setModel(new javax.swing.table.DefaultTableModel(data.toArray(new Object[0][0]), columns.isEmpty() ? getHeaders().toArray() : columns.toArray()) {
            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        });

        table.getColumnModel().getColumn(0).setCellRenderer(new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                JLabel label = (JLabel) super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                label.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 5));
                label.setFont(new Font(label.getFont().getName(), Font.BOLD, label.getFont().getSize()));

                label.setBackground(new java.awt.Color(102, 204, 255));
                label.setHorizontalAlignment((value instanceof Integer || value instanceof BigDecimal || value instanceof Number) ? RIGHT : LEFT);
                return label;
            }
        });

        table.setBorder(javax.swing.BorderFactory.createLineBorder(javax.swing.UIManager.getDefaults().getColor("Table.gridColor")));
        table.setPreferredScrollableViewportSize(new Dimension(1200, table.getRowCount() * table.getRowHeight()));
        return prepareTable(table);
    }

    public JTable prepareTable(JTable table) {
        table.setAutoCreateRowSorter(true);
        int columnCount = table.getColumnCount();

        table.getTableHeader().setFont(new Font(table.getTableHeader().getFont().getName(), Font.BOLD, table.getTableHeader().getFont().getSize()));
        table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        for (int i = 0; i < columnCount; i++) {
            final boolean firstColumn = i == 0;
            table.getColumnModel().getColumn(i).setCellRenderer(new DefaultTableCellRenderer() {
                @Override
                public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                    JLabel label = (JLabel) super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                    label.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 5));
                    if (firstColumn) {
                        label.setFont(new Font(label.getFont().getName(), Font.BOLD, label.getFont().getSize()));
                        label.setBackground(new java.awt.Color(102, 204, 255));
                    }
                    label.setHorizontalAlignment((value instanceof Integer || value instanceof BigDecimal || value instanceof Number) ? RIGHT : LEFT);
                    return label;
                }
            });
        }

        for (int i = 0; i < columnCount; i++) {
            if (i == 0) {
                table.getColumnModel().getColumn(i).setMinWidth(115);
                table.getColumnModel().getColumn(i).setMaxWidth(115);
            } else {
                table.getColumnModel().getColumn(i).setMinWidth(columnCount > 3 ? 150 : 325);
            }
        }

        return table;
    }

    public void insertTreeItem(TRItem item, String module) {
        switch (module) {
            case "VMA":
                VXController.getTreeLog().add(item);
                break;
            case "SMS":
                ALController.getTreeLog().add(item);
                break;
            case "EST":
                ESController.getTreeLog().add(item);
                break;
        }
        if (Objects.equals(getWorker().getBoxValue(activityBox).toUpperCase(), module.toUpperCase())) {
            DefaultTreeModel model = (DefaultTreeModel) txnTree.getModel();
            DefaultMutableTreeNode rootNode = ((DefaultMutableTreeNode) model.getRoot());
            DefaultMutableTreeNode node, parentNode = (DefaultMutableTreeNode) (item.isApproved() ? rootNode.getFirstChild() : rootNode.getLastChild());

            for (int i = 0; i < parentNode.getChildCount(); i++) {
                node = (DefaultMutableTreeNode) parentNode.getChildAt(i);
                if (Objects.equals(((AXNode) node.getUserObject()).getCode(), item.getCode())) {
                    model.insertNodeInto(new DefaultMutableTreeNode(item), node, 0);
                    break;
                }
            }
        }
    }

    public void purgeTreeItems() {
        try {
            boolean update = false;
            while (getTreeLog().size() > APController.treeLogSize) {
                getTreeLog().remove(0);
            }
            DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) txnTree.getLastSelectedPathComponent();
            for (int i = txnTree.getRowCount() - 1; i >= 0; i--) {
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) txnTree.getPathForRow(i).getLastPathComponent();
                if (node.getUserObject() instanceof TRItem) {
                    if (node.getParent() != null && !getTreeLog().contains((TRItem) node.getUserObject())) {
                        ((DefaultTreeModel) txnTree.getModel()).removeNodeFromParent(node);
                        if (Objects.equals(selectedNode, node)) {
                            update = true;
                        }
                    }
                }
            }
            if (update) {
                getWorker().expandAllNodes(txnTree, TRItem.class);
            }
        } catch (Throwable ex) {
            APMain.acxLog.logEvent(ex);
        }
    }

    private void showAboutInfo() {
        JOptionPane.showMessageDialog(this,
                "<html><font face=\"Arial\" weight=\"plain\" size=\"2\">PHilae version 4.0.0, Product licensed to " + getClient().queryBankName() + ", Nairobi, Kenya"
                + "<br/>Copyright \u00A9 2020-" + AXConstant.yearFormat.format(new Date()) + ", Neptune Software Plc, 7th floor Victoria Towers,"
                + "<br/>Kilimanjaro Avenue, Upperhill, Nairobi Kenya. All rights reserved.</font></html>", APController.application, JOptionPane.INFORMATION_MESSAGE);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aboutButton;
    private javax.swing.JMenu aboutMenu;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JComboBox<String> activityBox;
    private javax.swing.JMenuItem alertChargesMenuItem1;
    private javax.swing.JMenuItem alertSchemeMenuItem;
    private javax.swing.JMenuItem alertSettingsMenuItem1;
    private javax.swing.JMenu alertsMenu1;
    private javax.swing.JSplitPane bigSplitPane;
    public static final javax.swing.JTextPane console = new ACPane();
    private javax.swing.JPanel displayPanel;
    private javax.swing.JScrollPane displayScroller;
    private javax.swing.JMenuItem encryptMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator10;
    private javax.swing.JPopupMenu.Separator jSeparator12;
    private javax.swing.JPopupMenu.Separator jSeparator14;
    private javax.swing.JPopupMenu.Separator jSeparator16;
    private javax.swing.JPopupMenu.Separator jSeparator19;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator6;
    private javax.swing.JPopupMenu.Separator jSeparator8;
    private javax.swing.JToolBar leftToolBar;
    private javax.swing.JPanel listPanel;
    private javax.swing.JTable listTable;
    private javax.swing.JScrollPane listTableScroller;
    private javax.swing.JPanel lowerMessagePanel;
    private javax.swing.JTable lowerTable;
    private javax.swing.JScrollPane lowerTableScroller;
    private javax.swing.JMenuItem mailerChargesMenuItem;
    private javax.swing.JMenu mailerMenu;
    private javax.swing.JMenuItem mailerSchemeMenuItem;
    private javax.swing.JMenuItem mailerSettingsMenuItem;
    private javax.swing.JMenuItem manageAlertMenuItem;
    private javax.swing.JMenuItem manageMailerTaskMenuItem;
    public javax.swing.JMenuBar menuBar;
    private javax.swing.JToolBar metersToolBar;
    private javax.swing.JMenuItem mobileChargesMenuItem;
    private javax.swing.JMenu mobileMenu;
    private javax.swing.JMenuItem mobileSchemeMenuItem;
    private javax.swing.JMenuItem mobileSettingsMenuItem;
    private javax.swing.JSplitPane msgSplitPane;
    private javax.swing.JSplitPane rightSplitPane;
    private javax.swing.JButton shutdownButton;
    private javax.swing.JMenuItem shutdownMenuItem;
    private javax.swing.JCheckBoxMenuItem suspendAlertsCheckBoxMenuItem;
    private javax.swing.JCheckBoxMenuItem suspendMailerCheckBoxMenuItem;
    private javax.swing.JCheckBoxMenuItem suspendMobileCheckBoxMenuItem;
    private javax.swing.JPanel treePanel;
    private javax.swing.JTree txnTree;
    private javax.swing.JScrollPane txnTreeScroller;
    private javax.swing.JPanel upperMessagePanel;
    private javax.swing.JTable upperTable;
    private javax.swing.JScrollPane upperTableScroller;
    private javax.swing.JMenuItem usersMenuItem;
    // End of variables declaration//GEN-END:variables

    private final AXMeter estMeter = new AXMeter("EST", 1);
    private final AXMeter smsMeter = new AXMeter("SMS", 2);
    private final AXMeter vmaMeter = new AXMeter("VMA", 3);

    private final CSPanel estSchemes = new CSPanel();
    private final CSPanel vmaSchemes = new CSPanel();
    private final CSPanel smsSchemes = new CSPanel();

    private final TCPanel vmaCharges = new TCPanel();
    private final TCPanel smsCharges = new TCPanel();
    private final TCPanel estCharges = new TCPanel();

    private final ASPanel estSettings = new ASPanel();
    private final ALPanel smsAlerts = new ALPanel();
    private final ESPanel estTasks = new ESPanel();

    private final AEPanel cypherPanel = new AEPanel();
    private final ASPanel smsSettings = new ASPanel();
    private final ASPanel vmaSettings = new ASPanel();

    private final ULPanel adminLogin = new ULPanel();
    private final AUPanel usersPanel = new AUPanel();
    private ArrayList<ALHeader> headers = VXController.getHeaders();
    private ArrayList<TRItem> treeLog = VXController.getTreeLog();

    /**
     * @return the vmaMeter
     */
    public AXMeter getVmaMeter() {
        return vmaMeter;
    }

    /**
     * @return the smsMeter
     */
    public AXMeter getSmsMeter() {
        return smsMeter;
    }

    /**
     * @return the treeLog
     */
    public ArrayList<TRItem> getTreeLog() {
        return treeLog;
    }

    /**
     * @param treeLog the treeLog to set
     */
    public void setTreeLog(ArrayList<TRItem> treeLog) {
        this.treeLog = treeLog;
    }

    /**
     * @return the headers
     */
    public ArrayList<ALHeader> getHeaders() {
        return headers;
    }

    /**
     * @param headers the headers to set
     */
    public void setHeaders(ArrayList<ALHeader> headers) {
        this.headers = headers;
    }

    /**
     * @return the cypherPanel
     */
    public AEPanel getCypherPanel() {
        return cypherPanel;
    }

    /**
     * @return the estMeter
     */
    public AXMeter getEstMeter() {
        return estMeter;
    }
}
